/**
 * List the sub-pixel distance between two peaks using cublic split fit
 * supervised by ImageJ's built-in MaximumFinder.
 * 
 * Input:
 * - Image stack with one line profile ROI drawn on it.
 * 
 * Output:
 * - Distance between the 2 peaks.  Save the Plot Values by clicking on "List".
 * - Series of profile plots indicating the selected peaks (for debugging).
 * 
 * Development
 * ----------- 
 * 
 * To debug the script, from FIJI, open the Beanshell interpreter and run:
 * 
 *     source("/path/to/Diameter_Plot.bsh");
 * 
 * @author Pariksheet Nanda <pariksheet.nanda@uconn.edu> Public Domain
 * @version 2016.02.01-SNAPSHOT
 */

MIN_AMPLITUDE = 500;
NUM_POINTS_TO_FIT_AROUND_PEAK = 2;
MAGIC_TITLE_PREFIX = "Peaks in ";

import ij.IJ;
import ij.ImagePlus;
import ij.ImageStack;
import ij.WindowManager;
import ij.gui.ImageWindow;
import ij.gui.Plot;
import ij.gui.ProfilePlot;
import ij.measure.ResultsTable;
import ij.plugin.filter.MaximumFinder;
import ij.util.ArrayUtil;
import ij.util.Tools;

import java.awt.Color;
import java.lang.Math;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;

import org.apache.commons.math3.analysis.interpolation.SplineInterpolator;
import org.apache.commons.math3.analysis.solvers.BisectionSolver;

/** Return the spline around the center value, or null on failure. */
makeSpline(double [] x, double [] y) {
    si = new SplineInterpolator();
    return si.interpolate(x, y);
}

/** Get 1000 points, including start and excluding end point. */
range(start, end) {
    points = 1000;
    values = new double[points];
    diff = end - start;
    for (i = 0; i < points; i++)
        values[i] = start + i * diff / (double)points;
    return values;
}

/** Evaluate points of the spline all but last value of x. */
getSplineValues(spline, xVals) {
    values = new double[xVals.length];
    int i = 0;
    for (xVal : xVals) {
        // The spline ends prematurely.
        if (spline.isValidPoint(xVal))
            values[i] = spline.value(xVal);
        else
            break;
        i++;
    }
    return Arrays.copyOfRange(values, 0, i);
}

/** Get all roots of the spline function. */
getRoots(spline, start, end) {
    splineDeriv = spline.derivative();
    double relativeAccuracy = 1.0e-12;
    double absoluteAccuracy = 1.0e-8;
    solver = new BisectionSolver(relativeAccuracy, absoluteAccuracy);
    return solver.solve(100, splineDeriv, start, end, 0);
}

/** Get timestamps from Image Info. */
getTimestamps(imp) {
    timestamps = new ArrayList();
    lines = imp.getInfoProperty().split("\n");
    for (line : lines) {
        if (line.startsWith("timestamp")) {
            // Get the last element after the space.
            s = line.split(" ");
            timestamp = s[s.length - 1];
            timestamps.add((float)Tools.parseDouble(timestamp));
        }
    }
    // Convert to float for plot window.
    times = new float[timestamps.size()];
    for (i = 0; i < timestamps.size(); i++)
        times[i] = timestamps.get(i);
    return times;
}

impOrig = WindowManager.getCurrentImage();
if (impOrig == null) {
    IJ.error("No image is open.");
    return;
}
mf = new MaximumFinder();
imPlots = null;
nSlices = impOrig.getImageStackSize();
distancesUm = new float[nSlices];
distancesInterpUm = new float[nSlices];
slices = new float[nSlices];
for (n = 1; n <= nSlices; n++)
    slices[n-1] = n;
// Create a profile for each image.
for (n : slices) {
    impOrig.setT((int)n);
    profiler = new ProfilePlot(impOrig);
    profilerPlot = profiler.getPlot();
    x = Tools.toDouble(profilerPlot.getXValues());
    y = Tools.toDouble(profilerPlot.getYValues());
    maxima = mf.findMaxima(y, MIN_AMPLITUDE, false);
    xMaxima = new ArrayList();
    yMaxima = new ArrayList();
    idxMaxima = new ArrayList();
    for (maximum : maxima) {
        xMaxima.add(x[maximum]);
        yMaxima.add(y[maximum]);
        idxMaxima.add(maximum);
    }
    // Trim maxima arrays if there are more than 2 maxima.
    while (idxMaxima.size() > 2) {
        val = Collections.max(yMaxima);
        idx = yMaxima.indexOf(val);
        xMaxima.remove(idx);
        yMaxima.remove(idx);
        idxMaxima.remove(idx);
    }
    // Draw the plot profile.
    plotTitle = MAGIC_TITLE_PREFIX + impOrig.getTitle();
    plot = new Plot(plotTitle, "Line (pixels)", "Intensity (arb. units)", x, y);
    xInterpMaxima = new double[2];
    yInterpMaxima = new double[2];
    spline = makeSpline(x, y);
    for (maxi = 0; maxi < idxMaxima.size(); maxi++) {
        maximum = idxMaxima.get(maxi);
        // Set root search boundaries.
        start = maximum - NUM_POINTS_TO_FIT_AROUND_PEAK;
        end = maximum + NUM_POINTS_TO_FIT_AROUND_PEAK;
        if (start < 0 || end >= x.length) {
            continue;
            // maximum cannot be considered since
            // NUM_POINTS_TO_FIT_AROUND_PEAK is too large.
            IJ.error("A line edge is too close to one of the 2 peaks.\n" +
                     "Please redraw a longer, centered, line ROI and try again.");
            return;
        }
        // Get the roots
        xInterpMaxima[maxi] = getRoots(spline, x[start], x[end]);
    }
    // Plot the spline
    xSplineLong = range(0, x.length - 1);
    ySpline = getSplineValues(spline, xSplineLong);
    // ySpline will be trimmed due to some invalid points, so
    // remove those invalid spline points from xSplineLong.
    //xSpline = Arrays.copyOfRange(xSplineLong, 0, ySpline.length);
    xSpline = xSplineLong;
    plot.setColor(Color.BLUE);
    plot.addPoints(xSpline, ySpline, Plot.LINE);
    yInterpMaxima = getSplineValues(spline, xInterpMaxima);
    // Plot the roots
    plot.setColor(Color.BLUE);
    plot.setLineWidth(2);
    plot.addPoints(xInterpMaxima, yInterpMaxima, Plot.CIRCLE);
    // Plot the seed maxima.
    plot.setLineWidth(1);
    plot.setColor(Color.RED);
    plot.addPoints(xMaxima, yMaxima, Plot.CIRCLE);
    plot.addLabel(0.00, 0, idxMaxima.size() +" maxima");
    plot.addLabel(0.50, 0, "Min. amp.: "+ IJ.d2s(MIN_AMPLITUDE, 2));
    plot.draw();
    // Add the plot profile to a stack.
    impPlot = plot.getImagePlus();
    if (imPlots == null)
        imPlots = new ImageStack(impPlot.getWidth(), impPlot.getHeight());
    imPlots.addSlice(impPlot.getProcessor());
    // Record distance.
    xDiffPx = Math.abs(xMaxima.get(0) - xMaxima.get(1));
    distancesUm[(int)n-1] = (float)impOrig.getCalibration().getX(xDiffPx);
    xInterpDiffPx = Math.abs(xInterpMaxima[0] - xInterpMaxima[1]);
    distancesInterpUm[(int)n-1] = (float)impOrig.getCalibration().getX(xInterpDiffPx);
}
// Plot line profiles.
impPlots = new ImagePlus("All " + plotTitle, imPlots);
impPlots.show();
// Get timestamps.
times = getTimestamps(impOrig);
// Plot distances.
plot = new Plot("Peak Distances", "Time (s)", "Distance (um)", times, distancesUm);
plot.draw();
plot.show();
// Plot interpolated distances.
plot = new Plot("Interpolated Peak Distances", "Time (s)", "Distance (um)", times, distancesInterpUm);
plot.draw();
plot.show();

// Local Variables:
// mode: java
// tab-width: 4
// End:
